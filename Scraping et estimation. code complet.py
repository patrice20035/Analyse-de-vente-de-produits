{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d0b361c-9508-42d5-be57-03fbb7fb8f22",
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import os\n",
    "import time\n",
    "import re\n",
    "from rapidfuzz import fuzz  # Ajout pour fuzzy matching\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Liste des catégories disponibles\n",
    "CATEGORIES = [\n",
    "    'bio-et-ecologie', 'fruits-et-legumes', 'viandes-et-poissons', 'pains-et-patisseries',\n",
    "    'cremerie-et-produits-laitiers', 'charcuterie-et-traiteur', 'surgeles', 'epicerie-salee',\n",
    "    'epicerie-sucree', 'beaute-et-sante', 'boissons', 'nutrition-et-vegetale', 'hygiene-et-beaute',\n",
    "    'entretien-et-nettoyage', 'animalerie', 'bebe', 'jardin', 'entretien-de-la-maison',\n",
    "    'maison-et-decoration', 'cuisine', 'gros-electromenager', 'bricolage',\n",
    "    'velo-trotinettes-et-loisirs', 'smartphones-et-objets-connectes', 'image-et-son',\n",
    "    'informatique-et-bureau', 'jeux-videos', 'jeux-et-jouets', 'mode-et-bagagerie'\n",
    "]\n",
    "\n",
    "# Dossier de sortie\n",
    "OUTPUT_FOLDER = r\"C:/Users/DELL/OneDrive - etu.unistra.fr/Bureau/cours fac/PROGRAMMATION PYTHON/PROJET/Output\"\n",
    "os.makedirs(OUTPUT_FOLDER, exist_ok=True)\n",
    "\n",
    "# Demander à l'utilisateur ce qu'il veut scraper\n",
    "mode = input(\"Souhaitez-vous scraper des promotions, des produits, ou estimer un prix ? [promotions/products/estimate] : \").strip().lower()\n",
    "while mode not in [\"promotions\", \"products\", \"estimate\"]:\n",
    "    mode = input(\"Veuillez entrer 'promotions', 'products', ou 'estimate' : \").strip().lower()\n",
    "\n",
    "# S'il s'agit de produits, demander la catégorie\n",
    "if mode == \"products\":\n",
    "    print(\"Voici les catégories disponibles :\")\n",
    "    for idx, cat in enumerate(CATEGORIES, 1):\n",
    "        print(f\" {idx}. {cat}\")\n",
    "    while True:\n",
    "        try:\n",
    "            cat_choice = int(input(\"Choisissez le numéro de la catégorie : \").strip())\n",
    "            if 1 <= cat_choice <= len(CATEGORIES):\n",
    "                categorie = CATEGORIES[cat_choice - 1]\n",
    "                break\n",
    "            else:\n",
    "                print(\"Numéro invalide. Réessayez.\")\n",
    "        except ValueError:\n",
    "            print(\"Veuillez entrer un numéro valide.\")\n",
    "else:\n",
    "    categorie = None\n",
    "\n",
    "# Scraping d'une seule page de promotions\n",
    "def scrap_single_page_promotions():\n",
    "    driver = webdriver.Chrome()\n",
    "    page = 0\n",
    "    all_data = []\n",
    "    while True:\n",
    "        driver.get(f\"https://www.carrefour.fr/promotions?noRedirect=1&page={page}\")\n",
    "        time.sleep(5)\n",
    "        products = driver.find_elements(By.CLASS_NAME, \"product-list-grid__item\")\n",
    "        if not products:  # Break the loop if no products are found\n",
    "            break\n",
    "\n",
    "        data = []\n",
    "        for p in products:\n",
    "            try:\n",
    "                name = p.find_element(By.CSS_SELECTOR, \"a.product-card-title\").text\n",
    "            except:\n",
    "                name = None\n",
    "\n",
    "            price = None\n",
    "            old_price = None\n",
    "            try:\n",
    "                price_block = p.find_element(By.CSS_SELECTOR, \"div.product-price__amount--main\")\n",
    "                price_text = price_block.text\n",
    "                clean_price = re.sub(r'[^\\d,\\.]', '', price_text)\n",
    "                price = float(clean_price.replace(',', '.'))\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "            try:\n",
    "                old_price_block = p.find_element(By.CSS_SELECTOR, \"div.product-price__amount--old\")\n",
    "                old_price_text = old_price_block.text\n",
    "                clean_old_price = re.sub(r'[^\\d,\\.]', '', old_price_text)\n",
    "                old_price = float(clean_old_price.replace(',', '.'))\n",
    "            except:\n",
    "                pass\n",
    "\n",
    "            try:\n",
    "                unit = p.find_element(By.CSS_SELECTOR, \"span.product-list-card-plp-grid__per-unit-label\").text\n",
    "            except:\n",
    "                unit = None\n",
    "\n",
    "            try:\n",
    "                promo_description = p.find_element(By.CSS_SELECTOR, \"span.promotion-label-refonte__label\").text\n",
    "            except:\n",
    "                promo_description = None\n",
    "\n",
    "            try:\n",
    "                category = p.find_element(By.CSS_SELECTOR, \"span.product-card-category\").text\n",
    "            except:\n",
    "                category = None\n",
    "\n",
    "            if (price and old_price and price != old_price) or promo_description:\n",
    "                data.append({\n",
    "                    \"product_name\": name,\n",
    "                    \"price\": price,\n",
    "                    \"old_price\": old_price,\n",
    "                    \"difference\": round(old_price - price, 2) if price and old_price else None,\n",
    "                    \"percentage_difference\": round(((old_price - price) / old_price) * 100, 2) if price and old_price else None,\n",
    "                    \"price_per_unit\": unit,\n",
    "                    \"promo_description\": promo_description,\n",
    "                    \"category\": category,\n",
    "                    \"purchasable\": True,\n",
    "                    \"page\": page\n",
    "                })\n",
    "\n",
    "        all_data.extend(data)\n",
    "        page += 1\n",
    "    driver.quit()\n",
    "    return pd.DataFrame(all_data)\n",
    "\n",
    "# Scraping d'une seule page de produits\n",
    "def scrap_single_page_products(categorie):\n",
    "    driver = webdriver.Chrome()\n",
    "    page = 0\n",
    "    all_data = []\n",
    "    while True:\n",
    "        driver.get(f\"https://www.carrefour.fr/r/{categorie}?noRedirect=1&page={page}\")\n",
    "        time.sleep(5)\n",
    "        products = driver.find_elements(By.CLASS_NAME, \"product-list-grid__item\")\n",
    "        if not products:  # Break the loop if no products are found\n",
    "            break\n",
    "\n",
    "        data = []\n",
    "        for p in products:\n",
    "            try:\n",
    "                name = p.find_element(By.CSS_SELECTOR, \"a.product-card-title\").text\n",
    "            except:\n",
    "                name = None\n",
    "\n",
    "            try:\n",
    "                price_block = p.find_element(By.CSS_SELECTOR, \"div.product-price__amount--main\")\n",
    "                parts = price_block.find_elements(By.CSS_SELECTOR, \"p.product-price__content\")\n",
    "                price_text = ''.join([part.text for part in parts])\n",
    "                price = float(price_text.replace(',', '.').replace('€', '').strip())\n",
    "            except:\n",
    "                price = None\n",
    "\n",
    "            try:\n",
    "                unit = p.find_element(By.CSS_SELECTOR, \"span.product-list-card-plp-grid__per-unit-label\").text\n",
    "            except:\n",
    "                unit = None\n",
    "\n",
    "            data.append({\n",
    "                \"product_name\": name,\n",
    "                \"price\": price,\n",
    "                \"price_per_unit\": unit,\n",
    "                \"category\": categorie.replace('-', ' ').title(),\n",
    "                \"purchasable\": True,\n",
    "                \"page\": page\n",
    "            })\n",
    "\n",
    "        all_data.extend(data)\n",
    "        page += 1\n",
    "    driver.quit()\n",
    "    return pd.DataFrame(all_data)\n",
    "\n",
    "# Fonction pour estimer le prix d'un produit en temps réel\n",
    "def estimate_price():\n",
    "    print(\"Voici les catégories disponibles :\")\n",
    "    for idx, cat in enumerate(CATEGORIES, 1):\n",
    "        print(f\" {idx}. {cat}\")\n",
    "    while True:\n",
    "        try:\n",
    "            cat_choice = int(input(\"Choisissez le numéro de la catégorie pour l'estimation : \").strip())\n",
    "            if 1 <= cat_choice <= len(CATEGORIES):\n",
    "                categorie = CATEGORIES[cat_choice - 1]\n",
    "                break\n",
    "            else:\n",
    "                print(\"Numéro invalide. Réessayez.\")\n",
    "        except ValueError:\n",
    "            print(\"Veuillez entrer un numéro valide.\")\n",
    "\n",
    "    produit_cible = input(\"Saisissez le nom du produit à estimer : \").strip().lower()\n",
    "    df = scrap_single_page_products(categorie)\n",
    "    if df.empty:\n",
    "        print(\"⚠️ Aucun produit trouvé dans cette catégorie.\")\n",
    "        return\n",
    "\n",
    "    df['similarity'] = df['product_name'].apply(lambda x: produit_cible in x.lower() if pd.notnull(x) else False)\n",
    "    similaires = df[df['similarity']]\n",
    "\n",
    "    if similaires.empty:\n",
    "        print(\"⚠️ Aucun produit similaire trouvé.\")\n",
    "    else:\n",
    "        prix_moyen = similaires['price'].mean()\n",
    "        prix_min = similaires['price'].min()\n",
    "        prix_max = similaires['price'].max()\n",
    "        print(\"Produits similaires trouvés :\")\n",
    "        print(similaires[['product_name', 'price']])\n",
    "        print(f\"Nombre de produits similaires : {len(similaires)}\")\n",
    "        print(f\"Prix estimé moyen : {prix_moyen:.2f} €\")\n",
    "        print(f\"Prix minimum : {prix_min:.2f} €, Prix maximum : {prix_max:.2f} €\")\n",
    "\n",
    "        # Graphique des prix\n",
    "        plt.figure(figsize=(8,5))\n",
    "        plt.hist(similaires['price'], bins=10, color='skyblue', edgecolor='black')\n",
    "        plt.xlabel('Prix (€)')\n",
    "        plt.ylabel('Nombre de produits')\n",
    "        plt.title('Distribution des prix des produits similaires')\n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "# Exécution et sauvegarde CSV\n",
    "if mode == \"estimate\":\n",
    "    estimate_price()\n",
    "elif mode == \"promotions\":\n",
    "    df = scrap_single_page_promotions()\n",
    "    filename = \"carrefour_promotions_page0.csv\"\n",
    "else:\n",
    "    df = scrap_single_page_products(categorie)\n",
    "    filename = f\"carrefour_products_{categorie}_page0.csv\"\n",
    "\n",
    "if mode in [\"promotions\", \"products\"]:\n",
    "    csv_path = os.path.join(OUTPUT_FOLDER, filename)\n",
    "    if not df.empty:\n",
    "        df.to_csv(csv_path, index=False)\n",
    "        print(f\"✅ Fichier CSV enregistré : {csv_path}\")\n",
    "\n",
    "        # Exporter vers Excel avec analyses\n",
    "        excel_path = csv_path.replace('.csv', '.xlsx')\n",
    "        with pd.ExcelWriter(excel_path) as writer:\n",
    "            df.to_excel(writer, sheet_name='Données', index=False)\n",
    "            if mode == \"promotions\":\n",
    "                # Ajouter analyse moyenne différence par catégorie\n",
    "                if 'category' in df.columns and 'difference' in df.columns:\n",
    "                    mean_diff = df[df['old_price'].notna()].groupby('category')['difference'].mean().reset_index()\n",
    "                    mean_diff.to_excel(writer, sheet_name='Moyenne différences', index=False)\n",
    "                # Ajouter nombre de promotions par catégorie\n",
    "                if 'category' in df.columns:\n",
    "                    count_promos = df.groupby('category').size().reset_index(name='count_promotions')\n",
    "                    count_promos.to_excel(writer, sheet_name='Nombre promotions', index=False)\n",
    "        print(f\"📊 Fichier Excel avec analyses enregistré : {excel_path}\")\n",
    "        print(df.head())\n",
    "    else:\n",
    "        print(\"⚠️ Aucun produit correspondant aux critères n'a été trouvé.\")\n",
    "\n",
    "    # Analyse pour promotions uniquement\n",
    "    if mode == \"promotions\":\n",
    "        pass\n",
    "else:\n",
    "    print(\"⚠️ Aucun produit correspondant aux critères n'a été trouvé.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
